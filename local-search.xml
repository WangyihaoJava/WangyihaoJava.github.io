<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HashMap CucrrentHashMap  一致性Hash总结</title>
    <link href="/2021/12/06/HashMap%20CucrrentHashMap%20%20%E4%B8%80%E8%87%B4%E6%80%A7Hash%E6%80%BB%E7%BB%93/"/>
    <url>/2021/12/06/HashMap%20CucrrentHashMap%20%20%E4%B8%80%E8%87%B4%E6%80%A7Hash%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p> 1.7-hashtable = 数组（基础） + 链表 </p><p> （&gt;=）1.8 = 数组 + 链表 + 红黑树</p><p>HashMap-&gt;数组的大小</p><p>new HashMap（）；如果不写构造参数，默认大小16</p><p>如果说：写了初始容量：11 ？hashmap的容量就是11？</p><p>hashmap的get，put操作时间复杂度O(1)</p><p>key.hashCode = 不确定 - 有符号的整型值</p><p>key.hashCode % 16 = table.lenth = [0-15]  = index = 3;</p><p>array[index] = value; </p><p>数组所有的元素位是否能够100%被利用起来？</p><p>不一定，hash碰</p><p>引入链表结构解决hash冲突，采用头部插入链表法，链表时间复杂度O(n)</p><p>hash并不是用取模计算index，而是用位运算！</p><p>效率：位运算&gt;%</p><p>并没有说hashmap的容量一定是16，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** * The default initial capacity - MUST be a power of two. */</span>必须是<span class="hljs-number">2</span>的指数幂？<br><br>roundUpToPowerOf2(size)，强型将非<span class="hljs-number">2</span>的指数次幂的数值转化成<span class="hljs-number">2</span>的指数次幂<br>怎么转化？<br><span class="hljs-number">1</span>、必须最接近size，<span class="hljs-number">11</span><br><span class="hljs-number">2</span>、必须大于=size，<br><span class="hljs-number">3</span>、是<span class="hljs-number">2</span>的指数次幂<br><span class="hljs-number">16</span><br>size = <span class="hljs-number">17</span>，capacity = <span class="hljs-number">32</span><br><br>为什么一定要转成<span class="hljs-number">2</span>的指数次幂？<br>计算索引：<span class="hljs-keyword">int</span> i = indexFor(hash, table.length);<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h, <span class="hljs-keyword">int</span> length)</span> </span>&#123;<br><span class="hljs-comment">//  key.hashCode % table.lenth</span><br><span class="hljs-keyword">return</span> h &amp; (table.lenth-<span class="hljs-number">1</span>);<br>&#125;<br><br>h = <br><span class="hljs-number">0001</span> <span class="hljs-number">0101</span> <span class="hljs-number">0111</span> <span class="hljs-number">0010</span> <span class="hljs-number">1111</span><br><span class="hljs-number">0001</span> <span class="hljs-number">0101</span> <span class="hljs-number">0000</span> <span class="hljs-number">0010</span> <span class="hljs-number">0000</span><br><span class="hljs-number">16</span><br>    <span class="hljs-number">0</span><br>    <br><span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">1111</span> <span class="hljs-number">16</span>-<span class="hljs-number">1</span>=<span class="hljs-number">15</span><br><span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">1010</span><br><span class="hljs-number">0</span>-<span class="hljs-number">15</span><br>bit位运算：1815ms<br>mod取模运算：<span class="hljs-number">22282</span><br>效率差<span class="hljs-number">10</span>倍<br><br>HashMap扩容，<br>当前hashmap存了多少element，size&gt;=threshold<br>threshold扩容阈值 = capacity * 扩容阈值比率 <span class="hljs-number">0.75</span> = <span class="hljs-number">16</span>*<span class="hljs-number">0.75</span>=<span class="hljs-number">12</span><br>扩容怎么扩？<br>扩容为原来的<span class="hljs-number">2</span>倍。<br>转移数据<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">transfer</span><span class="hljs-params">(Entry[] newTable, <span class="hljs-keyword">boolean</span> rehash)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> newCapacity = newTable.length;<br>        <span class="hljs-keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">null</span> != e) &#123;<br>                Entry&lt;K,V&gt; next = e.next;<br>                <span class="hljs-keyword">if</span> (rehash) &#123; <br>                    e.hash = <span class="hljs-keyword">null</span> == e.key ? <span class="hljs-number">0</span> : hash(e.key);<span class="hljs-comment">//再一次进行hash计算？</span><br>                &#125;<br>                <span class="hljs-keyword">int</span> i = indexFor(e.hash, newCapacity);<br>                e.next = newTable[i];<br>                newTable[i] = e;<br>                e = next;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>链表成环，死锁问题<br><br>hash扩容，有个加载因子？loadfactor = <span class="hljs-number">0.75</span>为什么是<span class="hljs-number">0.75</span><br><span class="hljs-number">0.5</span><br><span class="hljs-number">1</span><br>牛顿二项式：基于空间与时间的折中考虑<span class="hljs-number">0.5</span><br><br>引入红黑树！<br>容量&gt;=<span class="hljs-number">64</span>才会链表转红黑树，否则优先扩容<br>只有等链表过长，阈值设置TREEIFY_THRESHOLD = <span class="hljs-number">8</span>，不是代表链表长度，链表长度&gt;<span class="hljs-number">8</span>,链表<span class="hljs-number">9</span>的时候转红黑树<br>Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>Node&lt;K,V&gt; next;<br>    <span class="hljs-keyword">do</span> &#123;<br>        next = e.next;<br>        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//yangguo.hashcode &amp; 16 = 0，用低位指针</span><br>            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                loHead = e;<br>            <span class="hljs-keyword">else</span><br>                loTail.next = e;<br>            loTail = e;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>             <span class="hljs-comment">//yangguo.hashcode &amp; 16 》 0 高位指针</span><br>            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                hiHead = e;<br>            <span class="hljs-keyword">else</span><br>                hiTail.next = e;<br>            hiTail = e;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br><span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) &#123;<br>    loTail.next = <span class="hljs-keyword">null</span>; <br>    newTab[j] = loHead;，移到新的数组上的同样的index位置<br>&#125;<br><span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) &#123;<br>    hiTail.next = <span class="hljs-keyword">null</span>;<br>    newTab[j + oldCap] = hiHead; <span class="hljs-comment">//index 3+16 = 19</span><br>&#125;<br>完全绕开rehash，要满足高低位移动，必须数组容量是<span class="hljs-number">2</span>的幂次方<br></code></pre></td></tr></table></figure><h2 id="cucrenthashmap"><a href="#cucrenthashmap" class="headerlink" title="cucrenthashmap"></a><strong>cucrenthashmap</strong></h2><p>1.7采用分段锁：就是说先创建一个元素为segment的数组 每个segment是一个reentryedlok 每个segment上面有一段的数组 这一段数组的每个节点是一个链表 很显然这样设计是保证了线程的安全性但是 效率很差</p><p>因为每个segment锁住的事一段数组也就是一部分数据 这一部分数据的中的其中一个如果要修改其他的都要进行加锁 </p><p>1.8之后采用了synchronize加cas的方式保证效率 摒弃了分段锁的方式 还是像hashmap那样的结构 只是对每个数组上的节点进行加锁 就是说只有再put的时候才进行加synchronize读数据的时候是不加锁的</p><p>另外有一个tansferhelper的概念 就是说在扩容的时候可以有多个线程执行</p><h2 id="一致性hash"><a href="#一致性hash" class="headerlink" title="一致性hash"></a><strong>一致性hash</strong></h2><p>对于传统的hash在实际生产中会存在问题</p><p>比如减少节点的时候会改变原有节点的映射关系 比如本来我三台机器都进行对3取模 三台机器会均分0 1 2 如果变成了对2取模就会可能会变成 0 1 0</p><p>增加机器也是如此</p><p>一致性hash可以解决这个问题</p><p>结构是一个环 范围是 0 - 2的32次方减1 同样将机器进行hash 得到hash值后打到环上 每个点负责该点到前一个点距离的这段数据 </p><p>但是这样存在的问题是 即使最开始是均匀分布的 如果新增或者删除节点还是会改变他均匀的结构 因为hash函数散列的特性有可能打偏 </p><p>所以需要用到虚拟节点的技术 就是每个机器虚拟出若干个节点打到这个环上面 节点负责处理虚拟出的节点的范围 每次新增和删除都虚拟出若干虚拟节点打到环上 这样就保证了均匀分布 并且扩展性很好</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>动态规划-最短路径问题</title>
    <link href="/2021/11/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/11/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 暴力递归的问题</span><br><span class="hljs-comment"> * 因为我没有记录每次子过程的解导致同一个解会有好多次重复的计算</span><br><span class="hljs-comment"> * 动态规划就是解决这个问题的</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 缓存 就是把每个的解都记录在map里面 每次查看一下有没有 他是不记录位置依赖的 所以严格意义上不是动态规划 如果记录位置依赖就是动态规划</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 对于最短路径而言 动态规划就是将你每次移动的状态记录下来</span><br><span class="hljs-comment"> * 所以如果是个一维的 那么一个数组 0 - n-1 就能装得下</span><br><span class="hljs-comment"> * 二维的 0 - (row - 1)  乘以 0 - (col - 1) 就能装得下</span><br><span class="hljs-comment"> * 所以每次我们的动态规划最重要的就是 定这个可以装得下所有变化的状态的结构</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 怎么知道是一维还是二维的 就是通过可变参数如果是1个就是一维表 如果是两个就是二维表 以此类推</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 比如一个二维的以下面最小路径为例</span><br><span class="hljs-comment"> * 因为动态规划是需要有位置依赖的 所以对于一个普遍位置 matrix[i][j] 如果想知道他的值既需要左边的又需要上面的 那么怎么去获取</span><br><span class="hljs-comment"> * 因为在暴力递归中 最后一行 和 最后一列是不依赖的 所以我们可以求出最后一行和最后一列后 在此基础上往下一层一层的推</span><br><span class="hljs-comment"> * 等我们把每个推完 那么想要普遍位置matrix[i][j]的值自然就可以求出来 因为现在他的左边和右边都有了</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinPath</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minPath1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> process1(matrix, matrix.length - <span class="hljs-number">1</span>, matrix[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">process1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> res = matrix[i][j];<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">return</span> res;<br>      &#125;<br>      <span class="hljs-comment">//如果已经走到头了 只能往左或者往上</span><br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j != <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">return</span> res + process1(matrix, i, j - <span class="hljs-number">1</span>);<br>      &#125;<br>      <span class="hljs-comment">//如果已经走到头了 只能往左或者往上</span><br>      <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">return</span> res + process1(matrix, i - <span class="hljs-number">1</span>, j);<br>      &#125;<br>      <span class="hljs-comment">//如果上面两个都没返回说明当前位置既可以往左又可以往上</span><br>      <span class="hljs-keyword">return</span> res + Math.min(process1(matrix, i, j - <span class="hljs-number">1</span>), process1(matrix, i - <span class="hljs-number">1</span>, j));<br>   &#125;<br><br><br><br>   <span class="hljs-comment">//增加缓存</span><br>   <span class="hljs-keyword">static</span> HashMap&lt;String,Integer&gt;cache = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">process2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> res = matrix[i][j];<br>      <span class="hljs-keyword">int</span> result;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) &#123;<br>         result =  res;<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j != <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-comment">//增加缓存如果算过直接取 没算过递归取算</span><br>         <span class="hljs-keyword">int</span> next = <span class="hljs-number">0</span>;<br>         String nextKey = String.valueOf(i) + <span class="hljs-string">&quot;_&quot;</span> + String.valueOf(j - <span class="hljs-number">1</span>);<br>         <span class="hljs-keyword">if</span> (cache.containsKey(nextKey))&#123;<br>            next = cache.get(nextKey);<br>         &#125;<span class="hljs-keyword">else</span> &#123;<br>            next = process2(matrix, i, j - <span class="hljs-number">1</span>);<br>         &#125;<br>         result =  res + next;<br>      &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">int</span> next = <span class="hljs-number">0</span>;<br>         String nextKey = String.valueOf(i - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;_&quot;</span> + String.valueOf(j);<br>         <span class="hljs-keyword">if</span> (cache.containsKey(nextKey))&#123;<br>            next = cache.get(nextKey);<br>         &#125;<span class="hljs-keyword">else</span> &#123;<br>            next = process2(matrix, i - <span class="hljs-number">1</span>, j);<br>         &#125;<br>         result =  res + next;<br>      &#125;<span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">int</span> upNext = <span class="hljs-number">0</span>;<br>         String upNextKey = String.valueOf(i) + <span class="hljs-string">&quot;_&quot;</span> + String.valueOf(j - <span class="hljs-number">1</span>);<br>         <span class="hljs-keyword">if</span> (cache.containsKey(upNextKey))&#123;<br>            upNext = cache.get(upNextKey);<br>         &#125;<span class="hljs-keyword">else</span> &#123;<br>            upNext = process2(matrix, i, j - <span class="hljs-number">1</span>);<br>         &#125;<br><br>         <span class="hljs-keyword">int</span> leftNext = <span class="hljs-number">0</span>;<br>         String leftNextKey = String.valueOf(i - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;_&quot;</span> + String.valueOf(j);<br>         <span class="hljs-keyword">if</span> (cache.containsKey(leftNextKey))&#123;<br>            leftNext = cache.get(leftNextKey);<br>         &#125;<span class="hljs-keyword">else</span> &#123;<br>            leftNext = process2(matrix, i - <span class="hljs-number">1</span>, j);<br>         &#125;<br>         result =  res + Math.min(upNext,leftNext);<br>      &#125;<br>      String key = String.valueOf(i) + <span class="hljs-string">&quot;_&quot;</span> + String.valueOf(j);<br>      cache.put(key,result);<br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minPath2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] m)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (m == <span class="hljs-keyword">null</span> || m.length == <span class="hljs-number">0</span> || m[<span class="hljs-number">0</span>] == <span class="hljs-keyword">null</span> || m[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-keyword">int</span> row = m.length;<br>      <span class="hljs-keyword">int</span> col = m[<span class="hljs-number">0</span>].length;<br>      <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[row][col];<br>      dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; row; i++) &#123;<br>         dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + m[i][<span class="hljs-number">0</span>];<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; col; j++) &#123;<br>         dp[<span class="hljs-number">0</span>][j] = dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>] + m[<span class="hljs-number">0</span>][j];<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; row; i++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; col; j++) &#123;<br>            dp[i][j] = Math.min(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]) + m[i][j];<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> dp[row - <span class="hljs-number">1</span>][col - <span class="hljs-number">1</span>];<br>   &#125;<br><br>   <span class="hljs-comment">// for test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[][] generateRandomMatrix(<span class="hljs-keyword">int</span> rowSize, <span class="hljs-keyword">int</span> colSize) &#123;<br>      <span class="hljs-keyword">if</span> (rowSize &lt; <span class="hljs-number">0</span> || colSize &lt; <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>      &#125;<br>      <span class="hljs-keyword">int</span>[][] result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[rowSize][colSize];<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != result.length; i++) &#123;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j != result[<span class="hljs-number">0</span>].length; j++) &#123;<br>            result[i][j] = (<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">10</span>);<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br><br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] grid)</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (grid == <span class="hljs-keyword">null</span> || grid.length == <span class="hljs-number">0</span> || grid[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>         &#125;<br>         <span class="hljs-keyword">int</span> rows = grid.length, columns = grid[<span class="hljs-number">0</span>].length;<br>         <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[rows][columns];<br>         dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; rows; i++) &#123;<br>            dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + grid[i][<span class="hljs-number">0</span>];<br>         &#125;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; columns; j++) &#123;<br>            dp[<span class="hljs-number">0</span>][j] = dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>] + grid[<span class="hljs-number">0</span>][j];<br>         &#125;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; rows; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; columns; j++) &#123;<br>               dp[i][j] = Math.min(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]) + grid[i][j];<br>            &#125;<br>         &#125;<br>         <span class="hljs-keyword">return</span> dp[rows - <span class="hljs-number">1</span>][columns - <span class="hljs-number">1</span>];<br>      &#125;<br>   &#125;<br><br><br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      <span class="hljs-keyword">int</span>[][] m = &#123; &#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span> &#125;, &#123; <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;, &#123; <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span> &#125; &#125;;<br>      System.out.println(minPath1(m));<br>      System.out.println(minPath2(m));<br><br>      m = generateRandomMatrix(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>);<br>      System.out.println(minPath1(m));<br>      System.out.println(minPath2(m));<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2021/11/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2021/11/16/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 两个元素是否属于一个集合</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 用list或者hashset也可以实现 但是代价很高 需要遍历</span><br><span class="hljs-comment"> * 那么用并查集是怎么做呢 最开始每个元素都指向自己 如果a在b中 a就指向b</span><br><span class="hljs-comment"> * 如果两个元素往上找都发现是指向b那么 两个元素在同一个集合</span><br><span class="hljs-comment"> * 也就是 a代 = b代 那么在一个集合</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 为什么要打平 打平后下一次再查的话代价就没那么高了</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 合并 需要先查一下issameset就是两个是否在同一个集合 如果不在才需要合并</span><br><span class="hljs-comment"> * 合并就是把小的集合的头部挂在大的集合头部的底下 就合并完成了（头部也就是代表点）</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnionFind</span> </span>&#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>      <span class="hljs-comment">// whatever you like</span><br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DisjointSets</span> </span>&#123;<br>      <span class="hljs-comment">//用的是map 的对应关系来表示往上指的过程</span><br>      <span class="hljs-comment">//k v 表示 k的父亲节点 是v 比如（a,b）代表a的父亲是b</span><br>      <span class="hljs-keyword">public</span> HashMap&lt;Node, Node&gt; fatherMap;<br>      <span class="hljs-comment">//k v k是节点 v是数字 表示如果k是代表节点 v存的是指向k的数量 可以理解为孩子的数量 如果k不是代表点 那么这个信息是无效的</span><br>      <span class="hljs-keyword">public</span> HashMap&lt;Node, Integer&gt; rankMap;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DisjointSets</span><span class="hljs-params">()</span> </span>&#123;<br>         fatherMap = <span class="hljs-keyword">new</span> HashMap&lt;Node, Node&gt;();<br>         rankMap = <span class="hljs-keyword">new</span> HashMap&lt;Node, Integer&gt;();<br>      &#125;<br><br>      <span class="hljs-comment">//初始化操作 如果想用并查集 应该把数据给我 然后进行初始化操作 甚至可以改成构造方法中做这件事</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeSets</span><span class="hljs-params">(List&lt;Node&gt; nodes)</span> </span>&#123;<br>         fatherMap.clear();<br>         rankMap.clear();<br>         <span class="hljs-keyword">for</span> (Node node : nodes) &#123;<br>            fatherMap.put(node, node);<br>            rankMap.put(node, <span class="hljs-number">1</span>);<br>         &#125;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">findFather</span><span class="hljs-params">(Node n)</span> </span>&#123;<br>         Node father = fatherMap.get(n);<br>         <span class="hljs-keyword">if</span> (father != n) &#123;<br>            <span class="hljs-comment">//递归行为 每次会把返回的father 在每次的下面map中put 的时候使用</span><br>            father = findFather(father);<br>         &#125;<br>         <span class="hljs-comment">//father就是每次递归返回回来的father</span><br>         fatherMap.put(n, father);<br>         <span class="hljs-keyword">return</span> father;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(Node a, Node b)</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (a == <span class="hljs-keyword">null</span> || b == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>         &#125;<br>         <span class="hljs-comment">//寻找代表点</span><br>         Node aFather = findFather(a);<br>         Node bFather = findFather(b);<br>         <span class="hljs-comment">//如果两个不在一个集合里面 我才给你合并</span><br>         <span class="hljs-keyword">if</span> (aFather != bFather) &#123;<br>            <span class="hljs-keyword">int</span> aFrank = rankMap.get(aFather);<br>            <span class="hljs-keyword">int</span> bFrank = rankMap.get(bFather);<br>            <span class="hljs-comment">//小的代表点挂在大的代表点下面就完成了合并</span><br>            <span class="hljs-keyword">if</span> (aFrank &lt;= bFrank) &#123;<br>               <span class="hljs-comment">//说明 aFrank小 bFrank大 aFrank小挂在bFrank下面就行了</span><br>               fatherMap.put(aFather, bFather);<br>               <span class="hljs-comment">//同级代表节点</span><br>               rankMap.put(bFather, aFrank + bFrank);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-comment">//否则就是bFrank小 aFrank大</span><br>               fatherMap.put(bFather, aFather);<br>               rankMap.put(aFather, aFrank + bFrank);<br>            &#125;<br>         &#125;<br>      &#125;<br><br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>最小生成树（Prim算法）</title>
    <link href="/2021/11/16/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%88Prim%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <url>/2021/11/16/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%88Prim%E7%AE%97%E6%B3%95%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从一个节点开始相邻的边都是可以解锁的点 选择一个边最小的边进行解锁点 看这个点是不是新出现的 如果是就要 依次往下考察 解锁 直到所有的点都被解锁</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 我们总是用一个大集合 让新节点加进来所以用hashset就可以 不需要并查集 k算法需要并查集是因为他需要比较两个集合是否需要合并(一个边的引入 出现两个点 两个点各自的集合 是否在一个并查集 是就连在一起了)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// undirected graph only</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Prim</span> </span>&#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EdgeComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Edge</span>&gt; </span>&#123;<br><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Edge o1, Edge o2)</span> </span>&#123;<br>         <span class="hljs-keyword">return</span> o1.weight - o2.weight;<br>      &#125;<br><br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;Edge&gt; <span class="hljs-title">primMST</span><span class="hljs-params">(Graph graph)</span> </span>&#123;<br>      <span class="hljs-comment">//优先级队列和k算法一个 里面放的边 小根堆</span><br>      PriorityQueue&lt;Edge&gt; priorityQueue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;(<span class="hljs-keyword">new</span> EdgeComparator());<br>      HashSet&lt;Node&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>      Set&lt;Edge&gt; result = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>      <span class="hljs-keyword">for</span> (Node node : graph.nodes.values()) &#123;<br>         <span class="hljs-comment">//不在集合里面</span><br>         <span class="hljs-keyword">if</span> (!set.contains(node)) &#123;<br>            <span class="hljs-comment">//node加集合里面</span><br>            set.add(node);<br>            <span class="hljs-comment">//node所有的边加在优先级队列</span><br>            <span class="hljs-keyword">for</span> (Edge edge : node.edges) &#123;<br>               priorityQueue.add(edge);<br>            &#125;<br>            <span class="hljs-keyword">while</span> (!priorityQueue.isEmpty()) &#123;<br>               <span class="hljs-comment">//从队列弹出最小的边</span><br>               Edge edge = priorityQueue.poll();<br>               Node toNode = edge.to;<br>               <span class="hljs-comment">//这个tonode是否已经加进set了</span><br>               <span class="hljs-keyword">if</span> (!set.contains(toNode)) &#123;<br>                  <span class="hljs-comment">//不在加进来</span><br>                  set.add(toNode);<br>                  result.add(edge);<br>                  <span class="hljs-comment">//重新解锁新的边 就是往优先级队列加这个新的tonode的边</span><br>                  <span class="hljs-keyword">for</span> (Edge nextEdge : node.edges) &#123;<br>                     priorityQueue.add(nextEdge);<br>                  &#125;<br>               &#125;<br>            &#125;<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>最小生成树（kruskal算法）</title>
    <link href="/2021/11/16/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%88kruskal%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <url>/2021/11/16/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%EF%BC%88kruskal%E7%AE%97%E6%B3%95%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>最小生成树问题顾名思义，概括来说就是路修的最短。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最小生成树算法应用范围一定是无向图</span><br><span class="hljs-comment"> * 最小生成树算法 一个是现在这个k算法 一个是p算法下一个的 都是生成最小生成树 只是策略不一样</span><br><span class="hljs-comment"> * 保证所有点是连通的 并且边是最小的</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * k算法以最小权重开始算 每个节点只要没有形成回路就选那个小权重的边 形成回路就不要 连起来的节点就生成一个集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//undirected graph only</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kruskal</span> </span>&#123;<br><br>   <span class="hljs-comment">// Union-Find Set</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnionFind</span> </span>&#123;<br>      <span class="hljs-keyword">private</span> HashMap&lt;Node, Node&gt; fatherMap;<br>      <span class="hljs-keyword">private</span> HashMap&lt;Node, Integer&gt; rankMap;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UnionFind</span><span class="hljs-params">()</span> </span>&#123;<br>         fatherMap = <span class="hljs-keyword">new</span> HashMap&lt;Node, Node&gt;();<br>         rankMap = <span class="hljs-keyword">new</span> HashMap&lt;Node, Integer&gt;();<br>      &#125;<br><br>      <span class="hljs-comment">//寻找代表点</span><br>      <span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">findFather</span><span class="hljs-params">(Node n)</span> </span>&#123;<br>         Node father = fatherMap.get(n);<br>         <span class="hljs-keyword">if</span> (father != n) &#123;<br>            <span class="hljs-comment">//递归行为 每次会把返回的father 在每次的下面map中put 的时候使用</span><br>            father = findFather(father);<br>         &#125;<br>         <span class="hljs-comment">//father就是每次递归返回回来的father</span><br>         fatherMap.put(n, father);<br>         <span class="hljs-keyword">return</span> father;<br>      &#125;<br>      <span class="hljs-comment">//初始化操作 如果想用并查集 应该把数据给我 然后进行初始化操作 甚至可以改成构造方法中做这件事</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeSets</span><span class="hljs-params">(Collection&lt;Node&gt; nodes)</span> </span>&#123;<br>         fatherMap.clear();<br>         rankMap.clear();<br>         <span class="hljs-keyword">for</span> (Node node : nodes) &#123;<br>            fatherMap.put(node, node);<br>            rankMap.put(node, <span class="hljs-number">1</span>);<br>         &#125;<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSameSet</span><span class="hljs-params">(Node a, Node b)</span> </span>&#123;<br>         <span class="hljs-keyword">return</span> findFather(a) == findFather(b);<br>      &#125;<br><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(Node a, Node b)</span> </span>&#123;<br>         <span class="hljs-keyword">if</span> (a == <span class="hljs-keyword">null</span> || b == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>         &#125;<br>         Node aFather = findFather(a);<br>         Node bFather = findFather(b);<br>         <span class="hljs-keyword">if</span> (aFather != bFather) &#123;<br>            <span class="hljs-keyword">int</span> aFrank = rankMap.get(aFather);<br>            <span class="hljs-keyword">int</span> bFrank = rankMap.get(bFather);<br>            <span class="hljs-keyword">if</span> (aFrank &lt;= bFrank) &#123;<br>               fatherMap.put(aFather, bFather);<br>               rankMap.put(bFather, aFrank + bFrank);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>               fatherMap.put(bFather, aFather);<br>               rankMap.put(aFather, aFrank + bFrank);<br>            &#125;<br>         &#125;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EdgeComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Edge</span>&gt; </span>&#123;<br><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Edge o1, Edge o2)</span> </span>&#123;<br>         <span class="hljs-keyword">return</span> o1.weight - o2.weight;<br>      &#125;<br><br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;Edge&gt; <span class="hljs-title">kruskalMST</span><span class="hljs-params">(Graph graph)</span> </span>&#123;<br>      UnionFind unionFind = <span class="hljs-keyword">new</span> UnionFind();<br>      <span class="hljs-comment">//所有点变成并查集的小集合</span><br>      unionFind.makeSets(graph.nodes.values());<br>      <span class="hljs-comment">//按照边的权重组成小根堆 里面放的都是边</span><br>      PriorityQueue&lt;Edge&gt; priorityQueue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;(<span class="hljs-keyword">new</span> EdgeComparator());<br>      <span class="hljs-keyword">for</span> (Edge edge : graph.edges) &#123;<br>         priorityQueue.add(edge);<br>      &#125;<br>      Set&lt;Edge&gt; result = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>      <span class="hljs-keyword">while</span> (!priorityQueue.isEmpty()) &#123;<br>         Edge edge = priorityQueue.poll();<br>         <span class="hljs-comment">//每次从并查集里面弹出一个 如果from和to已经在一个集合了 这个边是不要的 否则是要的</span><br>         <span class="hljs-comment">//为什么在一个集合里面就不要了呢 因为这样就形成回路了</span><br>         <span class="hljs-keyword">if</span> (!unionFind.isSameSet(edge.from, edge.to)) &#123;<br>            result.add(edge);<br>            <span class="hljs-comment">//并且把from和to的集合合并在一起</span><br>            unionFind.union(edge.from, edge.to);<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>经典算法之KMP</title>
    <link href="/2021/11/16/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8BKMP/"/>
    <url>/2021/11/16/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8BKMP/</url>
    
    <content type="html"><![CDATA[<p>kmp解决的问题是 一个字符串包不包含另一个字符串 如果包含返回开始的位置 不包含返回-1</p><p>暴力方法也可以做 从第一个位置往下配 0(n * m)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Code_KMP</span> </span>&#123;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 求某个位置字符最大前缀和后缀的长度</span><br><span class="hljs-comment">    * 前缀不能包含最后一个字符 后缀也不能包含第一个字符 对于第一个字符来讲 人为规定为0</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * kmp加速的过程就是 因为我可以知道str2的最大前缀和后缀 所以按照暴力匹配的方式</span><br><span class="hljs-comment">    * 我在第二次进行匹配的时候不用进行全值匹配</span><br><span class="hljs-comment">    * 我可以在str2中获取的后缀在str1中对应位置开始 与 str2的前缀部分小加速后的字符串进行匹配(也就是str1去掉后缀第一个字符和str2去掉前缀的第一个字符)</span><br><span class="hljs-comment">    * 如果没匹配上 我应该用getnext的值作为下标的位置跟str1中去匹配 如果再没匹配上循环次操作直到等于-1还没匹配上 那么就不包含</span><br><span class="hljs-comment">    * 如果匹配上了就一起往下走 直到str2没了</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 这样其实是舍弃了str1后缀之前的匹配部分 为什么舍弃 因为这一部分一定配不出来 为什么 因为如果舍弃的部分能配出来 那么舍弃的部分在str2中等量的长度前缀一定是相等的</span><br><span class="hljs-comment">    * 这样的话就说明str2中有更加长的前缀和后缀 这跟我们获取str2的前缀后缀是矛盾的 除非算错了 否则这种情况不可能出现</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> m</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br><br>   <span class="hljs-comment">//kmp主逻辑</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIndexOf</span><span class="hljs-params">(String s, String m)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || m == <span class="hljs-keyword">null</span> || m.length() &lt; <span class="hljs-number">1</span> || s.length() &lt; m.length()) &#123;<br>         <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">char</span>[] ss = s.toCharArray();<br>      <span class="hljs-keyword">char</span>[] ms = m.toCharArray();<br>      <span class="hljs-keyword">int</span> si = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">int</span> mi = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">int</span>[] next = getNextArray(ms);<br>      <span class="hljs-keyword">while</span> (si &lt; ss.length &amp;&amp; mi &lt; ms.length) &#123;<br>         <span class="hljs-comment">//如果s1和s2相等 那么同时往下走进行比较</span><br>         <span class="hljs-keyword">if</span> (ss[si] == ms[mi]) &#123;<br>            si++;<br>            mi++;<br>            <span class="hljs-comment">//next数组中记录着的是这个字符位置的最大前缀和后缀的长度</span><br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (next[mi] == -<span class="hljs-number">1</span>) &#123;<br>            si++;<br>            <span class="hljs-comment">//跳过前缀的位置 用前缀的后一个字符进行比较</span><br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            mi = next[mi];<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> mi == ms.length ? si - mi : -<span class="hljs-number">1</span>;<br>   &#125;<br><br>   <span class="hljs-comment">//getnext</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] getNextArray(<span class="hljs-keyword">char</span>[] ms) &#123;<br>      <span class="hljs-keyword">if</span> (ms.length == <span class="hljs-number">1</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[] &#123; -<span class="hljs-number">1</span> &#125;;<br>      &#125;<br>      <span class="hljs-keyword">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[ms.length];<br>      next[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<br>      next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">int</span> pos = <span class="hljs-number">2</span>;<br>      <span class="hljs-comment">//cn代表i-1位置的前缀的下一个字符</span><br>      <span class="hljs-keyword">int</span> cn = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (pos &lt; next.length) &#123;<br>         <span class="hljs-comment">//如果当前字符前一个字符和前缀的下一个字符相等 也就是当前字符的值是在原来前缀长度的基础上加1</span><br>         <span class="hljs-keyword">if</span> (ms[pos - <span class="hljs-number">1</span>] == ms[cn]) &#123;<br>            next[pos++] = ++cn;<br>            <span class="hljs-comment">//如果不相等 我要跳到cn的前缀的下一个字符 而next数组中以cn为下标的数正是我要跳到的cn的前缀的下一个字符</span><br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cn &gt; <span class="hljs-number">0</span>) &#123;<br>            cn = next[cn];<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            next[pos++] = <span class="hljs-number">0</span>;<br>         &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> next;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      String str = <span class="hljs-string">&quot;abcabcababacccccc&quot;</span>;<br>      String match = <span class="hljs-string">&quot;ktlbktlkktlbktlb&quot;</span>;<br>      String match1 = <span class="hljs-string">&quot;cabc&quot;</span>;<br><br>      String str1 = <span class="hljs-string">&quot;ababaabaabac&quot;</span>;<br>      String match11 = <span class="hljs-string">&quot;abaabac&quot;</span>;<br>      System.out.println(getIndexOf(str1, match11));<br>      getNextArray(match.toCharArray());<br><br>   &#125;<br>   <br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>经典算法之Manacher</title>
    <link href="/2021/11/16/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8BManacher/"/>
    <url>/2021/11/16/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E4%B9%8BManacher/</url>
    
    <content type="html"><![CDATA[<p>Manacher主要解决的是找到字符串中最大回文长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 笨办法就是 对于奇数回文 从0开始往两边扩直到扩不动了 就是最大长度 但是这个办法对于偶回文是不行的</span><br><span class="hljs-comment"> * 怎么办呢 两头和中间加上特殊字符 比如 133331  变成#1#3#3#3#3#1# 按照这个去扩 不管什么结果 最大结果除以2就是最终数</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * manacher跟kmp一样也是在原有暴力基础上有加速的过程</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 回文半径最右边界 所有扩的过程中能够到达的最右的位置</span><br><span class="hljs-comment"> * parr 每个字符扩出来的距离</span><br><span class="hljs-comment"> * pr 右边界</span><br><span class="hljs-comment"> * c 当前扩出来的右边界 的中心 每次取得最往右的边界都会且只会将第一次的值进行覆盖</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 有三种情况</span><br><span class="hljs-comment"> * 当i不在回文右边界里面 暴力扩 对于abc1234321ab 这样字符串前半部分abc123 都是需要暴力扩的</span><br><span class="hljs-comment"> * 当i在回文右边界里面 对于abc1234321ab  后半部分321ab 就是属于在里面 这种情况可以加速 怎么加速分三种情况</span><br><span class="hljs-comment"> *        情况一 对于i的回文半径在这个大的回文半径里面  i的回文半径是对应 i‘ 的回文半径这么长 不可能更长了</span><br><span class="hljs-comment"> *        因为他们在整个大回文串里面 是逆序的 所以上来就把i’的值赋值过来(i‘是对应的左边的字符串 已经暴力扩过了)</span><br><span class="hljs-comment"> *        不可能更长是因为 i’的回文左边界 x’ 右边界y‘ 他们当初一定是不等的 所以当时没有扩更长</span><br><span class="hljs-comment"> *        对应过来 i‘的x’ 与i的x 相等 i‘的y’和i的y相等 那么 x&#x27; ！= y‘ 就一定有 x ！= y 所以i的回文长度就是i’的回文长度 不可能更长了</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *        情况二 左边跑到外边了 i的回文半径也是直接出答案 就是 i 到 最右边界 pR的长度</span><br><span class="hljs-comment"> *        为什么呢 x‘ = y’ 是左边的已经求出来扩到外边的 因为 x‘ x 是以c为中心的回文内 所以 x’ = x</span><br><span class="hljs-comment"> *        为什么以c为中心右边的y没有扩进去呢 只能是 y‘ ！= y 所以 x ！= y(因为x‘ = y’ x’ = x 意思就是我 x’ y’ x都相等了 y‘ ！= y 那么x 和 y必然不等)所以最长只能是i到r</span><br><span class="hljs-comment"> *        情况三 压线了</span><br><span class="hljs-comment"> *        就需要 在i 到 r基础上往右再扩 因为有可能此时是右边跑到外边了 能扩的更大</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Manacher</span> </span>&#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span>[] manacherString(String str) &#123;<br>      <span class="hljs-keyword">char</span>[] charArr = str.toCharArray();<br>      <span class="hljs-keyword">char</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[str.length() * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != res.length; i++) &#123;<br>         res[i] = (i &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;#&#x27;</span> : charArr[index++];<br>      &#125;<br>      <span class="hljs-keyword">return</span> res;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxLcpsLength</span><span class="hljs-params">(String str)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span> || str.length() == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-keyword">char</span>[] charArr = manacherString(str);<br>      <span class="hljs-comment">//回文半径数组 记录每个字符的回文长度</span><br>      <span class="hljs-keyword">int</span>[] pArr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[charArr.length];<br>      <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;<br>      <span class="hljs-comment">//右边届</span><br>      <span class="hljs-keyword">int</span> pR = -<span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">int</span> max = Integer.MIN_VALUE;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i != charArr.length; i++) &#123;<br>         <span class="hljs-comment">//获取字符的最大回文长度的加速过程就是右边届如果在已知回文串中 就可以进行加速 否则就取1</span><br>         <span class="hljs-comment">//2 * index - i 2倍代表最大回文右边界 减去当前字符的下标</span><br>         <span class="hljs-comment">//pR - i 最大回文右边届 减去 当前下标</span><br>         pArr[i] = pR &gt; i ? Math.min(pArr[<span class="hljs-number">2</span> * index - i], pR - i) : <span class="hljs-number">1</span>;<br>         <span class="hljs-comment">//每个字符往外扩</span><br>         <span class="hljs-comment">//i + pArr[i] &lt; charArr.length 代表当前字符的回文右边界小于最右边</span><br>         <span class="hljs-keyword">while</span> (i + pArr[i] &lt; charArr.length &amp;&amp; i - pArr[i] &gt; -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//往外扩的过程 最开始我的左边和右边是否相等 依次累加左边和右边就是往外扩的过程 每次相等的话都进行加加</span><br>            <span class="hljs-keyword">if</span> (charArr[i + pArr[i]] == charArr[i - pArr[i]])<br>               pArr[i]++;<br>            <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">break</span>;<br>            &#125;<br>         &#125;<br><br>         <span class="hljs-comment">//更新更大的回文右边界</span><br>         <span class="hljs-keyword">if</span> (i + pArr[i] &gt; pR) &#123;<br>            pR = i + pArr[i];<br>            index = i;<br>         &#125;<br>         <span class="hljs-comment">//比较当前长度和已知最大的回文长度</span><br>         max = Math.max(max, pArr[i]);<br>      &#125;<br>      <span class="hljs-keyword">return</span> max - <span class="hljs-number">1</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      String str1 = <span class="hljs-string">&quot;abc1234321ab&quot;</span>;<br>      System.out.println(maxLcpsLength(str1));<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rocketMQ常见问题以及原理</title>
    <link href="/2021/08/05/rocketMQ%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>/2021/08/05/rocketMQ%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>消息存盘速度</p><p>如果磁盘用的合理 磁盘的速度完全匹配网络传输速度目前的高性能磁盘，顺序写速度</p><p>可以达到600MB/s 但是随机读写只有100k/s rocketmq采用的是顺序读写</p><p>另外使用的零拷贝中mmap技术实现减少用户态的切换</p><p>存储结构主要有三块</p><p>CommitLog 消息存储</p><p>ConsumerQueue 消息消费到哪的索引</p><p>IndexFile 提供一些根据key或者时间区查询的方式</p><p>abort 文件在启动时候创建正常关闭时候删除 如果非正常关闭不会删除 可以通过这个文件来判断是否正常</p><p>刷盘 </p><p>同步 安全不会产生丢消息 会影响性能</p><p>异步 性能比较高 可能会丢消息</p><p>主从复制</p><p>同步</p><p>异步</p><p>负载均衡</p><p>生产者会轮询目标下topic所有MessageQueue</p><p>也可以指定MessageQueue往一个里面发消息</p><p>也可以平均分配到各个MessageQueue</p><p>也可以设置同机房优先分配</p><p>重试消息 </p><p>如果消费失败可以进行重试 如果一直失败 超过16次会进入到死信队列</p><p>死信队列</p><p>需要人工处理</p><p>消费幂等</p><p>在互联网尤其是网络不稳定情况容易出现</p><p>发送时消息重复</p><p>投递时消息重复</p><p>负载均衡时消息重复</p><p>rocketmq保证分布式事务</p><p>首先生产者在生产消息前会向mq发一个half消息 mq收到消息后会响应一个half这样保证mq没有宕机</p><p>然后生产者执行本地事务 正常提交或者回滚都会发到mq 正常的就正常消费 回滚的就丢弃</p><p>因为提交本地事务有可能时间比较长 mq 也不会一直等 如果超过时间后 mq定期回查本地事务状态</p><p>生产者收到回查请求后会进行回查本地事务状态 然后将状态进行提交到mq</p><p>Dledger保证集群高可用</p><p>在rocketmq4.5之前是不能保证高可用的 在这个版本之后引入Dledger保证集群的高可用</p><p>它会接管commitlog消息存储</p><p>每个节点有三个状态，Leader，follower和candidate 初始状态大家都是follower 集群内部会有一个超市信号</p><p>大家都变成candidate 向其他成员发送请求 获得票数最多的就会成为leader 没有选出就会再次选举</p><p>Leader 会定期往follower发送心跳保证自己的地位 如果follower长时间没有收到心跳就会转为candidate向其他节点发送请求 超过半数就会成为leader</p><p>在raft协议中有一个逻辑时钟的概念叫做term</p><p>也就是每到这term时间会进行重新选举 选举成功的节点会保持一个leader的状态 这也就保证了在同一时间内只会有一个leader 不会产生脑裂的问题</p><p>两阶段提交</p><p>leader收到数据后会将数据标为uncommitted 然后将数据同步给从节点 从节点接收完数据后会返回给leader一个ack 当超过一半的从节点都返回了ack leader会将这个数据状态改为commited</p><p>这样就保证了如果宕机重启发现这个标识会进行重新同步</p><p>rocketmq如何保证不重复消费</p><p>在RocketMQ中，是无法保证每个消息只被投递一次的，所以要在业务上</p><p>自行来保证消息消费的幂等性。</p><p>而要处理这个问题，RocketMQ的每条消息都有一个唯一的MessageId，这个参数在多次投递的过程中</p><p>是不会改变的，所以业务上可以用这个MessageId来作为判断幂等的关键依据。</p><p>但是，这个MessageId是无法保证全局唯一的，也会有冲突的情况。所以在一些对幂等性要求严格的场</p><p>景，最好是使用业务上唯一的一个标识比较靠谱。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql之索引和事务的原理</title>
    <link href="/2021/08/03/mysql%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%92%8C%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <url>/2021/08/03/mysql%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%92%8C%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>索引篇<br>为什么不用二叉树 因为他的树的深度会越来越高 如果如果往一边倒</p><p>红黑树也是一样虽然他会自动平衡 但是在海量数据下他的树高度还是很高</p><p>b树就是为了解决树的高度 横向放的元素越多 树的高度越低 存储的数据越多</p><p><img src="C:\Users\Administrator\Desktop\暂存图片\截图.png" alt="截图"></p><p>B+树是b树的变种 非叶子结点冗余索引 为了存储更多的数据</p><p>从左到右依次递增排序</p><p>​    <img src="C:\Users\Administrator\Desktop\暂存图片\截图.png" alt="截图"></p><p>B+树是怎么查找数据的 首先先把根节点加载到内存中通过类似二分查找定位大概在哪个区间找到对应叶的磁盘文件地址 然后再往下重复加载查找直到找到数据</p><p>一个节点是16k能存1170个索引 也就是树的高度是3能存1170<em>1170</em>16是两千多万</p><p>根叶子节点可能常驻内存</p><p><img src="C:\Users\Administrator\Desktop\暂存图片\截图.png" alt="截图"></p><p>索引和数据分开存储叫非聚簇索引 存在一起叫聚簇索引 myisam最后的叶子结点存的是数据的文件地址 需要通过文件地址去指定的文件里面拿数据</p><p>innodb只有主键索引是聚簇索引 二级索引都是非聚簇索引 他的叶子节点存的是主键索引的文件地址 都需要进行回表来获取数据</p><p>为什么建议innodb必须主键</p><p>因为如果没有主键musql底层无法维护一个b+树 要么从表里面找一列不重复的作为索引 要么自己建一个隐藏列</p><p>‘为什么推荐整形自增主键</p><p>找一个元素是从根结点 找元素其实就是逐个比大小 如果是字符串还要把字符串专程ascii码再进行比对效率低</p><p>自增是因为会影响b+树叶子节点的结构的平衡 他会自己再进行重平衡影响性能</p><p>hash是利用hash算法去定位某个元素 在很大程度上一次就可以定位到元素的位置 但是hash不能做等值查找 也不能做范围查找 因为b+树他的叶子节点是一个双向链表可以通过一个叶子快速定位到下一个叶子 按照这种方式快速锁定一个范围 然后这个范围的数据加载出来就拿到了数据</p><p>​    <img src="C:\Users\Administrator\Desktop\暂存图片\截图.png" alt="截图"></p><p>最左前缀就是当一个联合索引会先根据最左边的进行排序，然后再第一个字段排序的基础上对第二个字段进行排序，以此类推，只有再第一个字段相同的情况下第二个字段才是有序的，如果无序就会走全扫描索引，索引再创建联合索引的时候尽量将用到范围的字段放在后面，不然会导致全扫描索引</p><p>索引下推是在</p><p>最左前缀为什么这样做的 要从左到右使用索引</p><p>因为它底层会根结联合索引进行排序，联合索引是根据这些索引字段从左到右依次进行排序， 如果没有最左边的字段 无法确认后面字段的顺序，只有最左边相同后面一个才是排好序，无法确定它的顺序就只能通过全表扫描</p><p>​                </p><p>什么是索引下推了?</p><p>对于联合索引 正常情况下按照对做匹配原则，比如三个字段的联合索引 第一个字段用到了右模糊 因为扎样查到的数据就是无序的了 第二和第三无法使用到索引 mysql5.6之前会将过滤出来的索引对饮的主键逐个进行回表查询 再对比后面两个字段的值是否符合 MySQL 5.6引入了索引下推优化，可以在索引遍历过程中，对索引中包含的所有字段先做判断，过滤掉不符合条件的记录之后再回表，可以有效的减少回表次数。使用了索引下推优化后，在过滤完第一个字段的左模糊后还会再过滤后面两个字段，拿着过滤完剩下的索引对应的主键id再回表查整行数据。                     </p><p>索引下推会减少回表次数，对于innodb引擎的表索引下推只能用于二级索引，innodb的主键索引(聚簇索引)树叶子节点上保存的是全 行数据，所以这个时候索引下推并不会起到减少查询全行数据的效果。         </p><p>覆盖索引 二级索引里面有当前索引的值和主键索引的值 走覆盖索引就是 只查询主键和当前索引的值 不会回表</p><p>范围查找age &lt; 10  age &gt;1 后面的&gt;不会走索引 联合索引中有范围的字段最好建在后面</p><p>如果最后字段的前面字段不用 为了走索引可以直接冗余写死 为了走索引</p><p>那么如果联合索引中有两个范围查找 肯定不会走索引 比如年龄和最近七天登陆</p><p>可以想办法把七天登陆换成一个标识 0 1 0没有登陆 1登陆减少一个范围字段</p><p>如果实在不行就再建一个联合索引 一个表里面可以建2-3个联合索引 如果建的太多会影响插入 删除 因为他要维护那个索引树 </p><p>where和order by冲突的话优选满足where因为用where过滤之后一般数量都是比较小的 就算order by不走索引使用文件排序也没关系</p><p>事务篇<br>可重复度读其实不是使用的mvcc机制来控制并发，而串行化是通过加锁来解决并发，在读的时候都加一个锁，由于是用的mvcc机制当我们操作这个隔离级别的事务的时候底层数据有可能会在变化的，所以我们在操作更新的时候update400 - 50 = 350）如果涉及再次更新 不要用（350这个数据 而要用数据库实时数据 也就是再查一次</p><p>另外串行化加锁是针对某条数据，比如说加一个数据有一个1了，在加ID是6的数据，在提交之前是可以查到1的，但是要是查6就会一直阻塞，直到那边提交6的数据</p><p>可重复读不能解决幻读 间隙锁可以解决幻读 他其实就是把所有的间隙锁住 无法新增了 就不会有幻读现象了 幻读就是当开启一个事物的时候 别的事物提交了一个新增数据 第一条事物还能读取到</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring-IOC+AOP</title>
    <link href="/2021/07/29/Spring-IOC+AOP/"/>
    <url>/2021/07/29/Spring-IOC+AOP/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210806163141604.png" alt="image-20210806163141604"></p><p>beanfactory就是一个顶层的类用来创建bean</p><p>factorybean是一个接口 实现它的类就是一个特殊的类 最终去调用他的重写的方面getobject返回的bean</p><p>@configuration加与不加的区别 比如一个bean里面有个属性是一个对象 加的话会从容器里面通过getbean拿这个对象 保证这个对象是单例的 不加话配置类里面bean和bean之间引用就是普通的调用 每次创建一个对象 不受ioc容器控制</p><p>beanname覆盖</p><p>如果@compont是通过scan扫描的如果扫描出来两个名字一样的类 会报错</p><p>但是如果@compont和@bean中两个名字一样的类 @bean会把前者覆盖 因为@bean是后执行的是在getbean之后解析成bean定义的 前者是在getbean之前进行解析成bean定义的</p><p>三级缓存</p><p>一级缓存解决循环依赖会有多线程情况下获取到不完整的bean</p><p>二级缓存出现解决了这个问题 将成熟bean和纯净bean分离 成熟的bean放进一级缓存 纯净bean二级缓存</p><p>为什么还要三级缓存 spring是想如果没有循环依赖的ban还是在初始化之后通过beanpostprocessor进行创建动态代理这样也符合单一职责 接耦 所以它使用了一个钩子函证钩子函数就是beanpostprocessor里面进行创建动态代理 用刚刚在put二级缓存的时候换成使用这个方法解决aop循环依赖问题 其实使用二级缓存同样也可以解决aop循环依赖 只不过spring这样实现更加规范</p><p>spring为什么没有解决构造循环依赖</p><p>因为构造函数还在实例化中 没有实例化完根本拿不到这个bean 不存在解决循环依赖</p><p>spring为什么没有解决多例循环依赖</p><p>因为多例没有放到缓存里面去 如果多例有循环依赖直接抛异常</p><p>AOP</p><p>前置通知后置通知都是通过责任链方式调用</p><p>责任链必须要有一个统一的抽象 这样他们才能依次调用 要么用循环调用要么用递归</p><p>aop实现流程主要分为三大步</p><p>解析切面</p><p>在第一个beanpostprocessor后置处理器里面扫描所有带@aspactj注解的类 将类里面的@before等注解生成一个advisor advisor包含advise和pointcut</p><p>创建动态代理</p><p>初始化之后创建动态代理</p><p>会进行初始化</p><p>拿到刚刚解析的所有的advisor跟当前正在创建的bean进行匹配(怎么匹配就是调用aspectj里面的api先做粗筛再做精筛)匹配完成后会加到一个list里面去 如果list里面有说明满足条件 为当前正在创建的bean生成一个动态代理 有实现接口实现就使用jdk动态代理 没有就用cjlib动态代理 </p><p>调用代理</p><p>将advisor转换成intercepter 在intercepter 进行递归责任链</p><p>aop的调用代理与事务的调用代理不一样 aop是我们自定义的@before 而事务是内置的</p><p>aop有几种实现方式</p><p>基于接口 就是spring最初的方式</p><p>基于注解 就是后来升级的方式</p><p>基于xml</p><p>在本类里面如果是jdk动态代理调用本类里面的方法不会执行动态代理的方法，因为jdk使用的是反射每次都会生成.class然后都直接调用方法，</p><p>这也就是为什么事务在同一个类里面调用会失效的原因了，它不会对同一个类里面的方法进行重复增强。</p><p>jdk动态代理只会生成一个.class文件 </p><p>而cjlib会生成多个.class文件 调用动态代理每次会路由找到cjlib动态代理类 再次调用还会来到这个路由 这就是在一个类里面多次调用只会生成一个动态代理类的原因 cjlib在本类能重复增强的原因就是他是通过继承的方式 直接调用实现了被代理类的子类（动态代理类）可以作为@config加与不加区别中扩展</p><p>jdk和cjlib</p><p>cjlib石通过给每一个方法创建一个动态代理对象 会对每个方法生成一个hashcode索引也可以称为路由 每次调用的时候通过这个路由获取动态代理对象 </p><p> jdk是通过反射的方式</p><p>jdk是自己生成的字节码文件 而cglib是通过asm生成多个字节码文件 启动时候可能cglib 略慢</p><p>代理原理区别</p><p>jdk会传入一个实例对象就是目标对象 然后通过对实例对象的反射实现增强</p><p>cglib通过继承的方式 会先将方法进行hashcode然后再回来去调用这个方法 去执行父类的方法就是增强类的方法</p><p>通过继承的方式就是 继承被代理的类 此时被代理类就是父类 增强的类就是子类 通过动态代理调用父类的select方法 他调用insert方法又会跑到子类的insert方法这就实现了重复拿到增强类也就是子类的方法 这就是本类调用会重复增强的原因</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>synchronized</title>
    <link href="/2021/07/16/synchronized/"/>
    <url>/2021/07/16/synchronized/</url>
    
    <content type="html"><![CDATA[<h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p>如果一个对象在方法中创建 没有被外部引用 在方法的结束该对象也就处于没有指向的状态 完全可以把它在栈空间创建 随着方法的结束而销毁<br>(逃逸分析)</p><p>是建立在逃逸分析的基础上 去除不可能存在竞争的锁<br>(锁消除)</p><p>相同的代码块经过多次加锁 在不影响执行结果的基础上 可以将这些代码放在同一个同步块里面 减少锁的开销<br>(锁粗化)</p><p>锁升级 是单向的不可逆</p><p>无锁</p><p>偏向锁</p><p>markwod锁标记且00 多个线程交替执行升级轻量级锁</p><p>自旋锁</p><p>重量级锁</p><p>markwod锁标记且01 是否偏向为0<br>(无锁)</p><p>markwod锁标记且01 是否偏向为1 当只有一个线程的时候会升级成这种状态 jvm启动的时候会延迟偏向锁<br>(偏向锁)</p><p>轻量级锁失败后 为了避免线程被挂起 会进行自旋优化 因为大多数线程持有锁的时候不会太长 如果现在直接把线程挂起会经历从用户态切换到内核态 操作比较重 消耗时间比较长 其实自旋就是空循环<br>(自旋锁)</p><p>对象内存布局</p><p>对象头 8个字节 64bit</p><p>markword</p><p>metadata</p><h2 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h2><p>markword主要存放对象年龄  线程id 锁标志 是否偏向 epoch 等数据 32位和64位操作系统分别占 32bit和64bit  不过64位也会开启指针压缩到32bit</p><p>实例数据</p><h2 id="对齐填充数据"><a href="#对齐填充数据" class="headerlink" title="对齐填充数据"></a>对齐填充数据</h2><p>由于虚拟机要求 对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐；</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>主要有三种：加在静态方法或者成员方法上锁的当前方法，锁加在当前的类对象的对象头上，如果在方法里面的同步块里面锁的是当前同步块里面的内容，有三种方式object object.class this 三种方式都能实现代码的同步 区别在于粒度不同，应用场景不同可以选择不同的方式  this是把锁标识加在当前类上面粒度比较大 而object可以指定一个类    另外 注意在方法中禁止在多个静态方法中加synchronized 因为他们都是加在同一个类上面 也就是当前类 调用该方法时候qps会受到严重影响 因为调用两个方法需要先获取锁 如果第一个方法没有释放锁 调用第二个会一直阻塞  最后禁止在方法里面使用大量sout 因为里面也是用到了synchronized</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>synchronized底层基于jvm的内置锁 通过monitor来实现的 简单来说就是当加了 synchronized关键字之后 编译生成字节码后会翻译成monitorenter和monitorexit 这两条指令会在需要同步的代码块的起止位置     如果加了synchronized字符串常量池中会多ACC_SYNCHRONIZED jvm就是根据这个标识来判断是否有加锁 如果有这标识 会先获取monitor</p><h2 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h2><p>为什么要获取monitor 因为monitor是当每个对象创建的使用会一起被创建 类似一个监视器 当获取这个对象的monitor时该对象会处于锁定状态 jvm就是通过进入和退出monitor来实现加锁和解锁的操作  比如说线程a进入monitor 进入数会加1如果a再次进入这个进入数还会加1 如果b想要进入的话只能阻塞 直到进入数为0的时候才能进入</p><h2 id="MESI"><a href="#MESI" class="headerlink" title="MESI"></a>MESI</h2><p>当一个cpu从内存中读取数据的时候会将当前缓存行中的状态改为E独占，当另外一个cpu也去读取这个数据的时候，第一个cpu会检测到地址冲突，为了解决这个问题两个cpu都会将缓存行改为S共享状态         修改时会将要修改的值设置为M修改状态 并且通知其他缓存了该值的cpu 并把数据写入到内存   其他cpu接收到通知后把自己的数据改为I无效状态 重新到内存里面读取      注意这里修改完数据不是立即写入内存的 而是把修改的数据缓存到一个storebuffer里面 因为传递消息是需要时间的 这样可以提升效率</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jvm内存模型总结</title>
    <link href="/2021/07/09/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2021/07/09/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210709110547362.png" alt="image-20210709110547362"></p><p>首先java代码通过编译器编译成class字节码文件，通过类加载系统经过 加载–&gt;验证–&gt;准备–&gt;解析–初始化等一系列操作加载到方法区，当然解析的过程会针对静态的方法替换为指向内存(数据所存内存指针，句柄等)的直接引用，另外动态链接是在方法运行时将符号引用替换为内存引用</p><p>方法区和堆会双向引用，因为堆里面存的是创建的对象，对象头也在这里，对象头有指针，指针指向的方法区中的类元数据，当然如果创建一个静态的对象，方法区中的内存地址会指向堆中该对象</p><p><strong>栈空间</strong>：每个线程会有自己的栈空间是独有的，可以把每个栈由各种栈帧组成，每个方法代表一个栈帧，每个栈空间默认是1m，当然也可以通过参数-Xss设置栈大小，设置的越小可以创建的线程越多，当然可以存放的栈帧就越少，具体需要根据业务需要进行设置</p><p>程序计数器：记录 程序执行到哪个位置，代码最终在底层会转为字节码，就是记录字节码的行号</p><p>本地方法栈：很多被native修饰的方法是c++实现的本地方法，所以如果调用这些方法也需要栈空间，当然也是私有的</p><p>每个栈帧包含以下内容</p><p>局部变量表：主要存储变量值，对象的内存地址</p><p>操作数栈：存储临时变量值，对临时变量值进行运算</p><p>动态链接：因为编译后的class文件，底层是由各种符号引用实现的，这里就是把符号引用转为直接引用</p><p>方法出口：每个方法执行结束后要知道当前栈帧的位置，方法出口就是记录当前执行到哪个位置</p><p>堆空间：当eden区满了之后会触发minorgc，将eden区存活的对象放进s0区，存活的对象年龄加一，第二次满了后会同时清理eden和s0区，将存活的对象放进s1区，这样周而复始，当年龄达到15岁之后会挪到老年代，为什么是15岁，因为对象的年龄是存储在对象头中，分配了4个bit位最大只能存储15。</p><p>什么样的对象会直接进入老年代，大对象，如果往s区挪动的时候，存活这批对象大小大于s区的一半，就会将s区中大于这批对象中最大年龄的对象放进老年代。</p><p>逃逸分析：就是分析对象的作用范围，如果只是在一个方法中定义，没有被方法以外所引用，随着方法的结束这个对象就是无效的对象了，那么就可以给这个对象分配在栈内存，随着方法的结束被回收掉</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>23种设计模式-代理模式-动态代理</title>
    <link href="/2021/06/30/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2021/06/30/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>代理模式</p><p>比如Source需要实现一个方法的增强，但是不能在a源码上面直接修改，因为Source被其他引用了，不符合开闭原则(对修改关闭，对增加开放)。</p><p>此时可以通过一个代理对象Invoke，实现Source的相同功能，构造方法中传入Source，在这个相同的功能上面做方法增强。</p><p>这时创建一个代理对象Invoke传入Source就可以实现方法的增强，并且没有修改源文件</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210630104610608.png" alt="image-20210630104610608"></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210630104610608.png" alt="img"></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210630104655327.png" alt="image-20210630104655327"></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210630104804105.png" alt="image-20210630104804105"></p><p>动态代理</p><p>不可能为每个需要增强方法的类都创建一个代理对象，动态代理就解决了这种问题，其核心问题增强的方法是一定的，怎么让代理对象动态的获取被代理对象要执行的方法，其实是代理对象在初始化的时候利用了反射，获取了被代理对象的classloader和interface，这样代理对象就可以实现被代理对象的原方法加上自己的增强方法实现动态代理</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210630104818777.png" alt="image-20210630104818777"></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210630104717387.png" alt="image-20210630104717387"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>redis总结</title>
    <link href="/2021/06/30/redis%E6%80%BB%E7%BB%93/"/>
    <url>/2021/06/30/redis%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​                                                                                                  </p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210629164922376.png" alt="image-20210629164922376"></p><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><p>string</p><p>应用场景<br>分布式全局序列号<br>INCRBY  orderId  1000  redis批量生成序列号提升性能<br>每台每次拿1000,0<del>1000,1001</del>2000,2001~3000<br>拿完后再各自慢慢处理这1000的容量<br>计数器</p><p>hash</p><p>就是一个双层map<br>key中一个value，value中还是一个map<br>使用场景需要将一个对象的属性拆分存入redis中<br>优点<br>1）同类数据归类整合储存，方便数据管理<br>2）相比string操作消耗内存与cpu更小<br>3）相比string储存更节省空间</p><p>缺点<br>过期功能不能使用在field上，只能用在key上<br>Redis集群架构下不适合大规模使用<br>因为如果一个hash的key中的属性很多的话，只能存在一个redis节点上，那么这个节点压力会比其他节点压力大很多，造成redis集群下压力分配不均衡！</p><p>list</p><p>模拟分布式系统数据结构<br>①：Stack(栈) = LPUSH（左边放） + LPOP（左边取）<br>②：Queue(队列）= LPUSH（左边放） + RPOP（右边取）<br>③：Blocking MQ(阻塞队列）= LPUSH（左边放） + BRPOP（右边阻塞取：没有数据就阻塞！）</p><p>问：那么redis实现的数据结构和jdk中提供的数据结构有什么区别呢？<br>答：jdk提供的数据结构仅在本服务中有用，如果在分布式环境下，则需要借助redis等中间件，模拟数据结构来统一管理数据</p><p>set</p><p>set1：（a、b、c）<br>set2：（b、c、d）<br>set3：（c、d、e）</p><h5 id="关注模型"><a href="#关注模型" class="headerlink" title="关注模型"></a>关注模型</h5><p>三个集合的<br>交集为：SINTER set1 set2 set3 ==&gt; { c }<br>并集为：SUNION set1 set2 set3 ==&gt; { a,b,c,d,e }<br>差集为：SDIFF set1 set2 set3 ==&gt; { a }<br>差集计算方式：set1 - （set2并set3） = {a、b、c} - {b、c、d、e} = {a} 只保留a中单独存在的元素</p><p>共同关注A的人：可以用交集来实现<br>我可能认识的人：可以使用差集来实现，把我关注的人求差集<br>我关注的人也关注A：可以使用SISMEMBER 命令查看A是否在我关注的人的关注列表中，如果存在把这个人返回</p><p>zset</p><p>zset相比于set多一个score 分值，正是根据这个分值进行排序，所以zset才能展示有序的数据</p><h5 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h5><p>rdb</p><p>rdb快照就是可以根据配置save 多长时间 多少个key被修改过执行一次快照，以二进制流的方式将当前数据保存到dump.rdb中<br>每次命令执行都会将所有redis内存快照到一个新的rdb文件里，并覆盖原有rdb快照文件。</p><p>有两种写入模式save和bgsave<br>save是同步进行，会阻塞客户端执行命令</p><p>bgsave是redis借助操作系统提供的写时复制技术（Copy-On-Write, COW）类似开启一个子线程来执行写入，如果在写入的这段时间主线程有有了新的修改数据，会存放在一个缓存副本里面，最后子线程执行副本里面的数据写入rdb文件<br>但是bgsave会消耗内存，因为新开了一个子线程</p><p>配置自动生成rdb文件后台使用的是bgsave方式。</p><p>aof</p><p>因为rdb会造成最近数据丢失，如果宕机会造成这样情况，所以aop是每秒(可以设置每次还是每秒还是系统默认)将修改的命令保存到aof文件中，需要恢复时执行aof，但是这样会造成很多无效命令，redis会定期将内存中最新的数据写入到aof文件中，AOF重写redis会fork出一个子进程去做(与bgsave命令类似)，不会对redis正常命令处理有太多 影响</p><p>Redis 4.0 混合持久化  在重启的的时候一般会采用aof来恢复数据，因为数据比较全，但是相比rdb恢复速度比较慢，要解决这个问题aof在重写的时候不会直接将内存数据转成RESP命令写入aof文件，而是将重写这一刻之前的内训做rdb快照处理，并且将rdb快照数据和增量更新数据分别存在一起等重新完成后才会把原aof覆盖<br>所以在重启的时候可以先加载rdb内容，在重放增加aof文件</p><p>哨兵</p><p>哨兵是redis的一种特殊服务，不会提供读写，只监控主从节点的状态，当客户端第一次请求会通过哨兵找到主节点，后续就会直接访问主节点，当节点信息发生变化时哨兵会第一时间感知到，并将主节点通知给客户端</p><p>主从原理</p><p>当给主节点配置一个从节点后，不管是不是第一次连接，从节点会向主节点发送一个sync请求，这时主节点就会生成一个新的rdb通过bgsave方式发给从节点，此时主节点会继续正常工作，如果有新的修改会生成一个缓存，最后发给从节点，从节点收到rdb和缓存后，会先清理之前的数据，然后直接执行就行，如果有大量请求，主节点也不会每次都生成rdb，只持久化一次，最后主节点通过socket长连接将又来的新命令持续发给从节点保证数据一致性</p><p>集群和原理</p><p>如果用哨兵模式实现集群不仅操作比较繁琐，而且性能也不是很好，所以现在  采用集群的模式，会把各个节点分成每个小集群组，将所有数据分为16384槽位，每个节点负责一部分槽位，客户端请求时候也会把槽位配置信息返回给客户端，客户端缓存这一份信息，如果想查询某个key时就可以很快定位到在哪个小集群上，当然这份信息有改动同步机制。<br>如果客户端发出一个错误命令，小集群发现该指令不归自己管，就会返回正确的地址，客户端重新向正确的地址操作</p><p>每个节点都有一个专门用于节点间gossip通信的端口，就是自己提供服务的端口号+10000，比如7001，那么  用于节点间通信的就是17001端口。 每个节点每隔一段时间都会往另外几个节点发送ping消息，同时其他几  点接收到ping消息之后返回pong消息。</p><p>选举机制；当从节点发现自己的主节点挂掉后就会尝试failover成为主节点，他会通过广播的形式发一个syn，只有其他主节点收到后才会回应一个ack，只能回一次，从节点会收集回复自己的ack超过半数以上就会成为新的主节点，当然极端情况如果三个主节点挂了一个，剩下两个主节点分别回复这两个从节点，收到回复ack数量一样，就会重新选举</p><p>脑裂问题：如果没有过半机制的话，可能由于网络抖动哨兵不能感知到主节点，会新选举一个主节点，当原主节点恢复后会成为新的从节点把原来数据清楚，同步现在新主节点的数据，这样就会导致数据丢失<br>可以用redlock利用过半机制解决该问题，但是会牺牲性能</p><h5 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h5><p>实现分布式锁要具备以下几点特性<br>容错<br>复制<br>不能产生死锁<br>不能解锁别人的<br>1、不能产生死锁(使用setIfAbsent将值设置为当前时间加过期时间，设置过期时间，如果已经过期的锁，可以获取锁，但是考虑到并发问题，使用getandset，获取set之前的老值，将当前key的值设置进去，加一个判断，如果老值跟刚才获取的值一致说明没有被修改过，可以加锁(类似cas操作)<br>2、自己加的锁只能自己解锁(解锁的时候判断传入的value是否为当前key的值)<br>3、复制就是用一个value<br>4、容错是集群方面的，只要大部分 Redis 节点启动，客户端可以获取和释放锁</p><p>这样只能实现一个比较高效的分布式锁，还是解决不了解锁原子性的问题，如果解锁的时候我刚执行到比较的位置redis挂了，那这个锁相当于一直没被解开，所以可以使用lua脚本保证原子性。lua脚本适合小批量的执行比较快的命令放在一起执行，因为如果整个lua脚本执行的时间比较长会造成阻塞。</p><p>还有一个问题就是如何设置过期时间问题，如果设置的比较短，当锁已经过期了但是任务还没有执行完成，那么这个锁是可以被其他线程拿到的，要解决这个问题需要实现对锁续命，保证该任务执行完成释放锁，其他线程才能拿到锁，可以使用时间定时线程池或者timer开启一个守护线程，定时去对当前主线程锁重新设置过期时间，但是这样实现起来比较复杂<br>可以利用redison来实现该功能，因为redison底层实现了现成的锁续命，以及使用了大量的lua来保证原子性</p><h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><p>穿透</p><p>不存在的key<br>1、将不存在的key缓存，设置一个过期时间<br>2.使用布隆过滤器</p><p>击穿</p><p>并发的查同一条过期key<br>1、设置这个热点缓存永不过期。这时要注意在value当中包含一个逻辑<br>上的过期时间，然后另起一个线程，定期重建这些缓存。<br>2、加载DB的时候，要防止并发。</p><p>雪崩</p><p>缓存层支撑不住或者宕机，类似大量请求访问bigkey，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。<br>1、批量更新可以的时候可以随机设置过期时间<br>2、设置热点数据永远不过期<br>3、使用redis集群，将热点数据均匀分布在不同搞得缓存数据库中</p><p>数据不一致</p><p>对于并发量很小的场景几乎可以不考虑该问题，因为发生的概率很小，就算并发量很高，如果是可以容忍短时间数据不一致，可以通过缓存加过期时间解决大部分问题<br>当然如果是读多写少的情况有下面两种方式解决<br>加读写锁，读读不互斥，读写互斥<br>1》先操作缓存，但是不删除缓存。将缓存修改为一个特殊值(-999)。客<br>户端读缓存时，发现是默认值，就休眠一小会，再去查一次Redis。 -》 特殊值对业<br>务有侵入。 休眠时间，可能会多次重复，对性能有影响。<br>2》延时双删。 先删除缓存，然后再写数据库，休眠一小会，再次删除缓存。-》 如<br>果数据写操作很频繁，同样还是会有脏数据的问题。</p><p>清除策略</p><p>被动清理</p><p>.volatile-ttl</p><p>主动清理</p><p>volatile-random</p><p>volatile-lru</p><p>volatile-lfu</p><p>allkeys-random</p><p>allkeys-lru</p><p>淘汰很久没被访问过的数据，以最近一次访问时间作为参考</p><p>allkeys-lfu</p><p>淘汰最近一段时间被访问次数最少的数据，以次数作为参考。</p><p>noeviction</p><p>当内存满了之后触发主动清理</p><p>布隆过滤器</p><p>在布隆过滤器中，如果他说没有的数据那一定没有，如果他说有的数据有可能没有，他存在一定的误判率，使用时需要在启动项目的时候将数据一次性初始化到过滤器中，如果中间有删除更新新增的数据，只能通过定期初始化过滤器来实现，他本身不能更新。<br>原理：他的底层是通过0 1 0 1  这样的二进制位数组来存储某个值是否存证，通过他的几个hash函数判断某个key落到哪个位置，如果存在就设置为1，获取的时候一样通过几个hash函数去定位在那些位置，如果有一个为0就返回不存在，如果都为1极有可能存在，因为有可能这个1是其他key导致的</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>svn报错sqllite database disk image is malformed 的解决方法</title>
    <link href="/2021/06/30/svn%E6%8A%A5%E9%94%99sqllite%20database%20disk%20image%20is%20malformed%20%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/06/30/svn%E6%8A%A5%E9%94%99sqllite%20database%20disk%20image%20is%20malformed%20%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>​                        </p><p>在使用svn的时候可能会出现莫名的报错，比如这个可能是一些异常终止造成的。</p><p>其实解决这个问题也很简单，网上也有很多解决方法，比如重新checkout新的代码即可，但是这样会造成本地未提交代码丢失</p><p>还有安装sqlit3，执行一些命令，寻找问题原因，但是这样会比较费时，如果比较着急使用就不太合适</p><p>所以这里记录一下另外一种简单的方式</p><p>可以新拉一个项目(每个项目根目录都有一个.svn文件夹，这里可能是隐藏了 找不到 可以使用搜索方式进行搜索.svn 获取取消隐藏)</p><p>在项目根目录下找到以下文件将新代码中的文件替换到老项目中</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622153118219.png" alt="image-20210622153118219"></p><p>然后再勾选红框中的对勾 重启idea后再取消红框中的对勾 即恢复提交</p><p>![]<a href="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622160552195.png">https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622160552195.png</a></p><p>另外由于一些误操作有时也可能会报该文件夹中缺少某些文件，同样用正常的该文件夹进行覆盖即可解决 </p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622153714600.png" alt="image-20210622153714600"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo+github快速搭建自己的博客</title>
    <link href="/2021/06/22/hexo+github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/06/22/hexo+github%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>打开本地git bash 创建一个自己保存博客的文件夹执行以下命令安装hexo</p><p>![image-20210622140851007](<a href="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622140851007.png">https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622140851007.png</a></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622141400643.png" alt="image-20210622141400643"></p><p>hexo详细使用可以在官方文档中查看</p><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>安装完成后就可以直接启动hexo</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622141556787.png" alt="image-20210622141556787"></p><p>然后就可以在浏览器上面输入localhost:4000/进入自己本地博客系统</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622141708347.png" alt="image-20210622141708347"></p><p>但是此时只能在本地访问，想要放在公网上就要依赖github了</p><p>先在github上面创建一个项目</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622142416918.png" alt="image-20210622142416918"></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622142542793.png" alt="image-20210622142542793"></p><p>然后将hexo和创建的项目绑定在一起。</p><p>这里需要先添加一个秘钥，如果不添加的话，后续每次部署都需要登录两次github会比较麻烦</p><p>依次执行以下命令，(用户名是自己的github账号，邮箱可以随意填写)</p><p>git config –global user.name “WangyihaoJava”</p><p>git config –global user.email “<a href="mailto:WangyihaoJava@qq.com">WangyihaoJava@qq.com</a>“</p><p>ssh-keygen -t rsa</p><p> cd ~/.ssh/</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622143015743.png" alt="img"></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622143321190.png" alt="image-20210622143321190"></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622143350864.png" alt="image-20210622143350864"></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622143442711.png" alt="image-20210622143442711"></p><p>执行完成后可得到一个公钥和私钥，复制公钥在github设置选项配置公钥</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622143930633.png" alt="image-20210622143930633"></p><p>回到gitbash设置配置文件</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622144058941.png" alt="image-20210622144058941"></p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622144218249.png" alt="image-20210622144218249"></p><p>repo就是自己项目的SSH地址</p><p>配置完成就可以新添加一个文件进行测试</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622144429525.png" alt="image-20210622144429525"></p><p>执行命令hexo g -d 将文件部署在github</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622144527496.png" alt="image-20210622144527496"></p><p>访问刚刚创建项目时填写的项目名称</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622144838112.png" alt="image-20210622144838112"></p><p>此时就可以通过该域名访问到自己的博客系统</p><p>但是目前写的博客里面只能是文字，不能使用图片，因为Typora上面的图片是引用本地的</p><p>所以这里需要将图片保存到gitee中，每次有新图片利用picgo自动上传到gitee中</p><p>首先在gitee上面新建一个开源项目保存图片</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622150137663.png" alt="image-20210622150137663"></p><p>生成一个令牌备用</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622150315620.png" alt="image-20210622150315620"></p><p>在Typora中下载picgo</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622145544794.png" alt="image-20210622145544794"></p><p>下载完成安装后在插件设置下载以下插件，只需要下载这一个即可</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622145625907.png" alt="image-20210622145625907"></p><p>repo就是在gitee中保存图片的项目</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622145812308.png" alt="image-20210622145812308"></p><p>repo就是刚刚在gitee中创建的项目，可以直接在url中获取，token就是刚刚生成的令牌，path就是储存图片的位置，branch默认使用master，customPath使用年月</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622150515545.png" alt="image-20210622150515545"></p><p>配置完成之后就可以typora中测试一下</p><p><img src="https://gitee.com/wangyihaogit/blog_imag/raw/master/imag/image-20210622150756407.png" alt="image-20210622150756407"></p><p>成功之后每次在typora中增加图片就会自动上传到gitee中</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/20/hello-world/"/>
    <url>/2021/06/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
